name: Docker CI/CD Workflow

on:
  push:
    branches:
      - main

jobs:

  build:
    name: Build and Test Applications
    runs-on: ubuntu-latest

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies for Node.js (Express Backend)
        run: |
          cd result
          npm install

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Install dependencies for Python (Flask Frontend)
        run: |
          cd vote
          pip install -r requirements.txt

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 3.1

      - name: Build .NET Worker
        run: |
          dotnet restore src/Worker/Worker.csproj
          dotnet build src/Worker/Worker.csproj --configuration Release --no-restore

#  docker:
#    name: Build and Push Docker Images
#    runs-on: ubuntu-latest
#    needs: build
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Build and Push Node.js Image
#        run: |
#          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/backend-express ./result
#          docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend-express
#
#      - name: Build and Push Python Image
#        run: |
#          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/frontend-python ./vote
#          docker push ${{ secrets.DOCKERHUB_USERNAME }}/frontend-python
#
#      - name: Build and Push .NET Worker Image
#        run: |
#          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/worker-net ./worker
#          docker push ${{ secrets.DOCKERHUB_USERNAME }}/worker-net

